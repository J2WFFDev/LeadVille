"""Initial database schema

Revision ID: 54108f9ec041
Revises: 
Create Date: 2025-09-13 18:24:50.404659

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '54108f9ec041'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('matches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('metadata_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_match_date', 'matches', ['date'], unique=False)
    op.create_index('idx_match_name', 'matches', ['name'], unique=False)
    op.create_table('nodes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('mode', sa.String(length=50), nullable=False),
    sa.Column('ssid', sa.String(length=100), nullable=True),
    sa.Column('ip_addr', sa.String(length=45), nullable=True),
    sa.Column('versions', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("mode IN ('online', 'offline', 'simulation')", name='check_node_mode'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('idx_node_mode', 'nodes', ['mode'], unique=False)
    op.create_index('idx_node_name', 'nodes', ['name'], unique=False)
    op.create_table('shooters',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('squad', sa.String(length=100), nullable=True),
    sa.Column('metadata_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_shooter_name', 'shooters', ['name'], unique=False)
    op.create_index('idx_shooter_squad', 'shooters', ['squad'], unique=False)
    op.create_table('stages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('match_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('layout_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('number > 0', name='check_stage_number_positive'),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_stage_match', 'stages', ['match_id'], unique=False)
    op.create_index('idx_stage_number', 'stages', ['match_id', 'number'], unique=False)
    op.create_table('runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('match_id', sa.Integer(), nullable=False),
    sa.Column('stage_id', sa.Integer(), nullable=False),
    sa.Column('shooter_id', sa.Integer(), nullable=False),
    sa.Column('started_ts', sa.DateTime(), nullable=True),
    sa.Column('ended_ts', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('annotations_json', sa.JSON(), nullable=True),
    sa.Column('audit_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("status IN ('pending', 'active', 'completed', 'dnf', 'dq')", name='check_run_status'),
    sa.CheckConstraint('ended_ts IS NULL OR started_ts IS NULL OR ended_ts >= started_ts', name='check_run_time_order'),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ),
    sa.ForeignKeyConstraint(['shooter_id'], ['shooters.id'], ),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_run_match', 'runs', ['match_id'], unique=False)
    op.create_index('idx_run_shooter', 'runs', ['shooter_id'], unique=False)
    op.create_index('idx_run_stage', 'runs', ['stage_id'], unique=False)
    op.create_index('idx_run_started', 'runs', ['started_ts'], unique=False)
    op.create_index('idx_run_status', 'runs', ['status'], unique=False)
    op.create_table('targets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stage_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('geometry', sa.JSON(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_target_name', 'targets', ['name'], unique=False)
    op.create_index('idx_target_stage', 'targets', ['stage_id'], unique=False)
    op.create_table('notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('run_id', sa.Integer(), nullable=False),
    sa.Column('author_role', sa.String(length=50), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('shooter_id', sa.Integer(), nullable=True),
    sa.Column('ts_utc', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("author_role IN ('RO', 'CRO', 'MD', 'Stats', 'Scorekeeper', 'System')", name='check_note_author_role'),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.ForeignKeyConstraint(['shooter_id'], ['shooters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_note_author', 'notes', ['author_role'], unique=False)
    op.create_index('idx_note_run', 'notes', ['run_id'], unique=False)
    op.create_index('idx_note_ts', 'notes', ['ts_utc'], unique=False)
    op.create_table('sensors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('hw_addr', sa.String(length=17), nullable=False),
    sa.Column('label', sa.String(length=100), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=True),
    sa.Column('node_id', sa.Integer(), nullable=True),
    sa.Column('calib', sa.JSON(), nullable=True),
    sa.Column('last_seen', sa.DateTime(), nullable=True),
    sa.Column('battery', sa.Float(), nullable=True),
    sa.Column('rssi', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('battery >= 0 AND battery <= 100', name='check_sensor_battery'),
    sa.CheckConstraint('rssi >= -100 AND rssi <= 0', name='check_sensor_rssi'),
    sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], ),
    sa.ForeignKeyConstraint(['target_id'], ['targets.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('hw_addr')
    )
    op.create_index('idx_sensor_hw_addr', 'sensors', ['hw_addr'], unique=False)
    op.create_index('idx_sensor_last_seen', 'sensors', ['last_seen'], unique=False)
    op.create_index('idx_sensor_target', 'sensors', ['target_id'], unique=False)
    op.create_table('timer_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ts_utc', sa.DateTime(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('raw', sa.String(length=500), nullable=True),
    sa.Column('run_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("type IN ('START', 'SHOT', 'STOP', 'READY')", name='check_timer_event_type'),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_timer_event_run', 'timer_events', ['run_id'], unique=False)
    op.create_index('idx_timer_event_ts', 'timer_events', ['ts_utc'], unique=False)
    op.create_index('idx_timer_event_type', 'timer_events', ['type'], unique=False)
    op.create_table('sensor_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ts_utc', sa.DateTime(), nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=False),
    sa.Column('magnitude', sa.Float(), nullable=False),
    sa.Column('features_json', sa.JSON(), nullable=True),
    sa.Column('run_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('magnitude >= 0', name='check_sensor_magnitude_positive'),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_sensor_event_magnitude', 'sensor_events', ['magnitude'], unique=False)
    op.create_index('idx_sensor_event_run', 'sensor_events', ['run_id'], unique=False)
    op.create_index('idx_sensor_event_sensor', 'sensor_events', ['sensor_id'], unique=False)
    op.create_index('idx_sensor_event_ts', 'sensor_events', ['ts_utc'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_sensor_event_ts', table_name='sensor_events')
    op.drop_index('idx_sensor_event_sensor', table_name='sensor_events')
    op.drop_index('idx_sensor_event_run', table_name='sensor_events')
    op.drop_index('idx_sensor_event_magnitude', table_name='sensor_events')
    op.drop_table('sensor_events')
    op.drop_index('idx_timer_event_type', table_name='timer_events')
    op.drop_index('idx_timer_event_ts', table_name='timer_events')
    op.drop_index('idx_timer_event_run', table_name='timer_events')
    op.drop_table('timer_events')
    op.drop_index('idx_sensor_target', table_name='sensors')
    op.drop_index('idx_sensor_last_seen', table_name='sensors')
    op.drop_index('idx_sensor_hw_addr', table_name='sensors')
    op.drop_table('sensors')
    op.drop_index('idx_note_ts', table_name='notes')
    op.drop_index('idx_note_run', table_name='notes')
    op.drop_index('idx_note_author', table_name='notes')
    op.drop_table('notes')
    op.drop_index('idx_target_stage', table_name='targets')
    op.drop_index('idx_target_name', table_name='targets')
    op.drop_table('targets')
    op.drop_index('idx_run_status', table_name='runs')
    op.drop_index('idx_run_started', table_name='runs')
    op.drop_index('idx_run_stage', table_name='runs')
    op.drop_index('idx_run_shooter', table_name='runs')
    op.drop_index('idx_run_match', table_name='runs')
    op.drop_table('runs')
    op.drop_index('idx_stage_number', table_name='stages')
    op.drop_index('idx_stage_match', table_name='stages')
    op.drop_table('stages')
    op.drop_index('idx_shooter_squad', table_name='shooters')
    op.drop_index('idx_shooter_name', table_name='shooters')
    op.drop_table('shooters')
    op.drop_index('idx_node_name', table_name='nodes')
    op.drop_index('idx_node_mode', table_name='nodes')
    op.drop_table('nodes')
    op.drop_index('idx_match_name', table_name='matches')
    op.drop_index('idx_match_date', table_name='matches')
    op.drop_table('matches')
    # ### end Alembic commands ###
